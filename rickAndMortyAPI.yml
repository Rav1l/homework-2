openapi: 3.0.3
info:
  title: Rick and Morty API
  description: rickandmortyapi.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://rickandmortyapi.com/api
tags:
- name: Characters
  description: Characters
  externalDocs:
        description: Learn about characters operations.
        url: https://rickandmortyapi.com/documentation/#character
- name: Locations
  description: Locations
  externalDocs:
        description: Learn about locations operations.
        url: https://rickandmortyapi.com/documentation/#location
- name: Episodes
  description: Episodes
  externalDocs:
        description: Learn about episodes operations.
        url: https://rickandmortyapi.com/documentation/#episode
paths:
  /character:
    get:
      tags:
        - Characters
      summary:  Gets all characters
      operationId: getAllCharacters
      parameters:
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Characters'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /character/{id}:
    get:
      tags:
        - Characters
      summary: Gets a single character by ID
      operationId: getCharacterById
      parameters:
        - name: id
          in: path
          description: The ID of the character
          required: true
          schema:
            type: integer
            format: int
            minimum: 1
            maximum: 826
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterModel'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /character/{ids}:
    get:
      tags:
        - Characters
      summary: Gets a multiple characters by ID
      operationId: getMultipleCharactersById
      parameters:
        - name: ids
          in: path
          description: The IDs of the charactes
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int
            minItems: 1
            maxItems: 826
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterModel'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /character/:
    get:
      tags:
        - Characters
      summary: Gets filtered characters
      operationId: getFilderedCharacters
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - in: query
          allowReserved: true
          name: name
          description: The name of the character
          required: false
          schema:
            type: string
        - in: query
          allowReserved: true
          name: status
          description: The status of the character (Alive, Dead or unknown)
          required: false
          schema:
            type: string
            enum:
              - alive
              - dead
              - unknown
        - in: query
          allowReserved: true
          name: species
          description: The species of the charactes
          required: false
          schema:
            type: string
        - in: query
          allowReserved: true
          name: type
          description: The type or subspecies of the character
          required: false
          schema:
            type: string
        - in: query
          allowReserved: true
          name: gender
          description: The gender of the character (Female, Male, Genderless or unknown)
          required: false
          schema:
            type: string
            enum:
              - Female
              - Male
              - Genderless
              - unknown
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Characters'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /location:
    get:
      tags:
        - Locations
      summary:  Gets all locations
      operationId: getAllLocations
      parameters:
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /location/{id}:
    get:
      tags:
        - Locations
      summary: Gets a single location by ID
      operationId: getLocationById
      parameters:
        - name: id
          in: path
          description: The id of the location.
          required: true
          schema:
            type: integer
            format: int
            minimum: 1
            maximum: 126
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationModel'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /location/{ids}:
    get:
      tags:
        - Locations
      summary: Gets a multiple locations by ID
      operationId: getMultipleLocationsById
      parameters:
        - name: ids
          in: path
          description: The IDs of the locations.
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int
            minItems: 1
            maxItems: 126
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationModel'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /location/:
    get:
      tags:
        - Locations
      summary: Gets filtered locations
      operationId: getFilderedLocations
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - in: query
          allowReserved: true
          name: name
          description: The name of the location
          required: false
          schema:
            type: string
        - in: query
          allowReserved: true
          name: type
          description: The type of the location
          required: false
          schema:
            type: string
        - in: query
          allowReserved: true
          name: dimension
          description: The dimension in which the location is located
          required: false
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /episode:
    get:
      tags:
        - Episodes
      summary:  Gets all episodes
      operationId: getAllEpisodes
      parameters:
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episodes'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /episode/{id}:
    get:
      tags:
        - Episodes
      summary: Gets a single episode by ID
      operationId: getEpisodeById
      parameters:
        - name: id
          in: path
          description: The ID of the episode.
          required: true
          schema:
            type: integer
            format: int
            minimum: 1
            maximum: 51
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodeModel'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /episode/{ids}:
    get:
      tags:
        - Episodes
      summary: Gets a multiple episodes by ID
      operationId: getMultipleEpisodeById
      parameters:
        - name: ids
          in: path
          description: The IDs of the episodes.
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int
            minItems: 1
            maxItems: 51
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EpisodeModel'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /episode/:
    get:
      tags:
        - Episodes
      summary: Gets filtered episodes
      operationId: getFilderedEpisodes
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - in: query
          allowReserved: true
          name: name
          description: The name of the episode
          required: false
          schema:
            type: string
        - in: query
          allowReserved: true
          name: episode
          description: The code of the episode.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episodes'
        default:
          description: enexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    Info:
      type: object
      required:
        - count
        - pages
        - next
        - prev
      properties:
        count:
          type: integer
        pages:
          type: integer
        next:
          type: string
          nullable: true
        perv:
          type: string
          nullable: true
    Characters:
      type: object
      required:
      - info
      - results
      properties:
        info:
          $ref: '#/components/schemas/Info'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CharacterModel'
    CharacterModel:
      type: object
      required:
        - id
        - name
        - status
        - species
        - type
        - gender
        - origin
        - location
        - image
        - episode
        - url
        - created
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
        species:
          type: string
        type:
          type: string
        gender:
          type: string
        origin:
          required:
            - name
            - url
          properties:
            name:
              type: string
            url:
              type: string
          type: object
        location:
          required:
            - name
            - url
          properties:
            name:
              type: string
            url:
              type: string
          type: object
        image:
          type: string
        episode:
          type: array
          items:
            type: string
        url:
          type: string
        created:
          type: string
    Locations:
      type: object
      required:
      - info
      - results
      properties:
        info:
          $ref: '#/components/schemas/Info'
        results:
          type: array
          items:
            $ref: '#/components/schemas/LocationModel'
    LocationModel:
      type: object
      required:
        - id
        - name
        - type
        - dimension
        - residents
        - url
        - created
      properties:
          id:
            type: integer
          name:
            type: string
          type:
            type: string
          dimension:
            type: string
          residents:
            type: array
            items:
              type: string
          url:
            type: string
          created:
            type: string
    Episodes:
      type: object
      required:
      - info
      - results
      properties:
        info:
          $ref: '#/components/schemas/Info'
        results:
          type: array
          items:
            $ref: '#/components/schemas/EpisodeModel'
    EpisodeModel:
      type: object
      required:
      - id
      - name
      - air_date
      - episode
      - characters
      - url
      - created
      properties:
        id:
          type: integer
        name:
          type: string
        air_date:
          type: string
        episode:
          type: string
        characters:
          type: array
          items:
            type: string
        url:
          type: string
        created:
          type: string

    ErrorModel:
      required:
      - code
      - message
      type: object
      properties:
        message:
          type: string
        code:
          maximum: 600
          minimum: 100
          type: integer
