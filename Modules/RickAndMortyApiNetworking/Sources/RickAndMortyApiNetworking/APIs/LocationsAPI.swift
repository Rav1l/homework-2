//
// LocationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LocationsAPI {

    /**
     Gets all locations
     
     - parameter page: (query)  (optional)
     - returns: Locations
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAllLocations(page: Int? = nil) async throws -> Locations {
        return try await getAllLocationsWithRequestBuilder(page: page).execute().body
    }

    /**
     Gets all locations
     - GET /location
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<Locations> 
     */
    open class func getAllLocationsWithRequestBuilder(page: Int? = nil) -> RequestBuilder<Locations> {
        let localVariablePath = "/location"
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Locations>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets filtered locations
     
     - parameter page: (query)  (optional)
     - parameter name: (query) The name of the location (optional)
     - parameter type: (query) The type of the location (optional)
     - parameter dimension: (query) The dimension in which the location is located (optional)
     - returns: Locations
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFilderedLocations(page: Int? = nil, name: String? = nil, type: String? = nil, dimension: String? = nil) async throws -> Locations {
        return try await getFilderedLocationsWithRequestBuilder(page: page, name: name, type: type, dimension: dimension).execute().body
    }

    /**
     Gets filtered locations
     - GET /location/
     - parameter page: (query)  (optional)
     - parameter name: (query) The name of the location (optional)
     - parameter type: (query) The type of the location (optional)
     - parameter dimension: (query) The dimension in which the location is located (optional)
     - returns: RequestBuilder<Locations> 
     */
    open class func getFilderedLocationsWithRequestBuilder(page: Int? = nil, name: String? = nil, type: String? = nil, dimension: String? = nil) -> RequestBuilder<Locations> {
        let localVariablePath = "/location/"
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "dimension": (wrappedValue: dimension?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Locations>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a single location by ID
     
     - parameter id: (path) The id of the location. 
     - returns: LocationModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getLocationById(id: String) async throws -> LocationModel {
        return try await getLocationByIdWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets a single location by ID
     - GET /location/{id}
     - parameter id: (path) The id of the location. 
     - returns: RequestBuilder<LocationModel> 
     */
    open class func getLocationByIdWithRequestBuilder(id: String) -> RequestBuilder<LocationModel> {
        var localVariablePath = "/location/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocationModel>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a multiple locations by ID
     
     - parameter ids: (path) The IDs of the locations. 
     - returns: LocationModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMultipleLocationsById(ids: [Int64]) async throws -> LocationModel {
        return try await getMultipleLocationsByIdWithRequestBuilder(ids: ids).execute().body
    }

    /**
     Gets a multiple locations by ID
     - GET /location/{ids}
     - parameter ids: (path) The IDs of the locations. 
     - returns: RequestBuilder<LocationModel> 
     */
    open class func getMultipleLocationsByIdWithRequestBuilder(ids: [Int64]) -> RequestBuilder<LocationModel> {
        var localVariablePath = "/location/{ids}"
        let idsPreEscape = "\(APIHelper.mapValueToPathItem(ids))"
        let idsPostEscape = idsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ids}", with: idsPostEscape, options: .literal, range: nil)
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocationModel>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
