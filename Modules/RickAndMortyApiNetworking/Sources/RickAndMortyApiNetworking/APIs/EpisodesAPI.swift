//
// EpisodesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EpisodesAPI {

    /**
     Gets all episodes
     
     - parameter page: (query)  (optional)
     - returns: Episodes
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAllEpisodes(page: Int? = nil) async throws -> Episodes {
        return try await getAllEpisodesWithRequestBuilder(page: page).execute().body
    }

    /**
     Gets all episodes
     - GET /episode
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<Episodes> 
     */
    open class func getAllEpisodesWithRequestBuilder(page: Int? = nil) -> RequestBuilder<Episodes> {
        let localVariablePath = "/episode"
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Episodes>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a single episode by ID
     
     - parameter id: (path) The ID of the episode. 
     - returns: EpisodeModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getEpisodeById(id: String) async throws -> EpisodeModel {
        return try await getEpisodeByIdWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets a single episode by ID
     - GET /episode/{id}
     - parameter id: (path) The ID of the episode. 
     - returns: RequestBuilder<EpisodeModel> 
     */
    open class func getEpisodeByIdWithRequestBuilder(id: String) -> RequestBuilder<EpisodeModel> {
        var localVariablePath = "/episode/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EpisodeModel>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets filtered episodes
     
     - parameter page: (query)  (optional)
     - parameter name: (query) The name of the episode (optional)
     - parameter episode: (query) The code of the episode. (optional)
     - returns: Episodes
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFilderedEpisodes(page: Int? = nil, name: String? = nil, episode: String? = nil) async throws -> Episodes {
        return try await getFilderedEpisodesWithRequestBuilder(page: page, name: name, episode: episode).execute().body
    }

    /**
     Gets filtered episodes
     - GET /episode/
     - parameter page: (query)  (optional)
     - parameter name: (query) The name of the episode (optional)
     - parameter episode: (query) The code of the episode. (optional)
     - returns: RequestBuilder<Episodes> 
     */
    open class func getFilderedEpisodesWithRequestBuilder(page: Int? = nil, name: String? = nil, episode: String? = nil) -> RequestBuilder<Episodes> {
        let localVariablePath = "/episode/"
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "episode": (wrappedValue: episode?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Episodes>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a multiple episodes by ID
     
     - parameter ids: (path) The IDs of the episodes. 
     - returns: EpisodeModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMultipleEpisodeById(ids: [String]) async throws -> [EpisodeModel] {
        return try await getMultipleEpisodeByIdWithRequestBuilder(ids: ids).execute().body
    }

    /**
     Gets a multiple episodes by ID
     - GET /episode/{ids}
     - parameter ids: (path) The IDs of the episodes. 
     - returns: RequestBuilder<EpisodeModel> 
     */
    open class func getMultipleEpisodeByIdWithRequestBuilder(ids: [String]) -> RequestBuilder<[EpisodeModel]> {
        var localVariablePath = "/episode/{ids}"
        let idsPreEscape = "\(APIHelper.mapValueToPathItem(ids))"
        let idsPostEscape = idsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ids}", with: idsPostEscape, options: .literal, range: nil)
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EpisodeModel]>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
