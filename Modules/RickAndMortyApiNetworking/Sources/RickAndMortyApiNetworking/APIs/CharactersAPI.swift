//
// CharactersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CharactersAPI {

    /**
     Gets all characters
     
     - parameter page: (query)  (optional)
     - returns: Characters
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAllCharacters(page: Int? = nil) async throws -> Characters {
        return try await getAllCharactersWithRequestBuilder(page: page).execute().body
    }

    /**
     Gets all characters
     - GET /character
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<Characters> 
     */
    open class func getAllCharactersWithRequestBuilder(page: Int? = nil) -> RequestBuilder<Characters> {
        let localVariablePath = "/character"
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Characters>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a single character by ID
     
     - parameter id: (path) The ID of the character 
     - returns: CharacterModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCharacterById(id: Int) async throws -> CharacterModel {
        return try await getCharacterByIdWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets a single character by ID
     - GET /character/{id}
     - parameter id: (path) The ID of the character 
     - returns: RequestBuilder<CharacterModel> 
     */
    open class func getCharacterByIdWithRequestBuilder(id: Int) -> RequestBuilder<CharacterModel> {
        var localVariablePath = "/character/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterModel>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_getFilderedCharacters: String, CaseIterable {
        case alive = "alive"
        case dead = "dead"
        case unknown = "unknown"
    }

    /**
     * enum for parameter gender
     */
    public enum Gender_getFilderedCharacters: String, CaseIterable {
        case female = "Female"
        case male = "Male"
        case genderless = "Genderless"
        case unknown = "unknown"
    }

    /**
     Gets filtered characters
     
     - parameter page: (query)  (optional)
     - parameter name: (query) The name of the character (optional)
     - parameter status: (query) The status of the character (Alive, Dead or unknown) (optional)
     - parameter species: (query) The species of the charactes (optional)
     - parameter type: (query) The type or subspecies of the character (optional)
     - parameter gender: (query) The gender of the character (Female, Male, Genderless or unknown) (optional)
     - returns: Characters
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFilderedCharacters(page: Int? = nil, name: String? = nil, status: Status_getFilderedCharacters? = nil, species: String? = nil, type: String? = nil, gender: Gender_getFilderedCharacters? = nil) async throws -> Characters {
        return try await getFilderedCharactersWithRequestBuilder(page: page, name: name, status: status, species: species, type: type, gender: gender).execute().body
    }

    /**
     Gets filtered characters
     - GET /character/
     - parameter page: (query)  (optional)
     - parameter name: (query) The name of the character (optional)
     - parameter status: (query) The status of the character (Alive, Dead or unknown) (optional)
     - parameter species: (query) The species of the charactes (optional)
     - parameter type: (query) The type or subspecies of the character (optional)
     - parameter gender: (query) The gender of the character (Female, Male, Genderless or unknown) (optional)
     - returns: RequestBuilder<Characters> 
     */
    open class func getFilderedCharactersWithRequestBuilder(page: Int? = nil, name: String? = nil, status: Status_getFilderedCharacters? = nil, species: String? = nil, type: String? = nil, gender: Gender_getFilderedCharacters? = nil) -> RequestBuilder<Characters> {
        let localVariablePath = "/character/"
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "species": (wrappedValue: species?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "gender": (wrappedValue: gender?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Characters>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a multiple characters by ID
     
     - parameter ids: (path) The IDs of the charactes 
     - returns: CharacterModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMultipleCharactersById(ids: [Int]) async throws -> CharacterModel {
        return try await getMultipleCharactersByIdWithRequestBuilder(ids: ids).execute().body
    }

    /**
     Gets a multiple characters by ID
     - GET /character/{ids}
     - parameter ids: (path) The IDs of the charactes 
     - returns: RequestBuilder<CharacterModel> 
     */
    open class func getMultipleCharactersByIdWithRequestBuilder(ids: [Int]) -> RequestBuilder<CharacterModel> {
        var localVariablePath = "/character/{ids}"
        let idsPreEscape = "\(APIHelper.mapValueToPathItem(ids))"
        let idsPostEscape = idsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ids}", with: idsPostEscape, options: .literal, range: nil)
        let localVariableURLString = RickAndMortyAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterModel>.Type = RickAndMortyAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
